generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  email           String            @unique
  password        String
  firstName       String?
  lastName        String?
  avatar          String?
  company         String?
  phone           String?
  address         String?
  city            String?
  postalCode      String?
  country         String?
  timezone        String            @default("Europe/Paris")
  currency        String            @default("EUR")
  theme           String            @default("light")
  language        String            @default("fr")
  emailVerified   Boolean           @default(false)
  isActive        Boolean           @default(true)
  role            Role              @default(USER)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  automations     Automation[]
  categories      Category[]
  clients         Client[]
  emails          Email[]
  InvoiceTemplate InvoiceTemplate[]
  invoices        Invoice[]
  notes           Note[]
  notifications   Notification[]
  projects        Project[]
  quotes          Quote[]
  sessions        Session[]
  tags            Tag[]
  assignedTasks   Task[]            @relation("TaskAssignee")
  ownedTasks      Task[]            @relation("TaskOwner")
  timeLogs        TimeLog[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  priority    Priority      @default(MEDIUM)
  color       String        @default("#3B82F6")
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  progress    Int           @default(0)
  isArchived  Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  clientId    String?
  categoryId  String?
  emails      Email[]
  invoices    Invoice[]
  notes       Note[]
  projectTags ProjectTag[]
  category    Category?     @relation(fields: [categoryId], references: [id])
  client      Client?       @relation(fields: [clientId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotes      Quote[]
  tasks       Task[]
  timeLogs    TimeLog[]

  @@map("projects")
}

model Task {
  id             String     @id @default(cuid())
  title          String
  description    String?
  status         TaskStatus @default(TODO)
  priority       Priority   @default(MEDIUM)
  dueDate        DateTime?
  completedAt    DateTime?
  estimatedHours Float?
  position       Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  userId         String
  projectId      String?
  assigneeId     String?
  emails         Email[]
  notes          Note[]
  taskTags       TaskTag[]
  assignee       User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  project        Project?   @relation(fields: [projectId], references: [id])
  owner          User       @relation("TaskOwner", fields: [userId], references: [id], onDelete: Cascade)
  timeLogs       TimeLog[]

  @@map("tasks")
}

model Client {
  id           String        @id @default(cuid())
  name         String
  company      String?
  email        String?
  phone        String?
  address      String?
  city         String?
  postalCode   String?
  country      String?
  website      String?
  notes        String?
  status       ClientStatus  @default(ACTIVE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts     Contact[]
  emails       Email[]
  interactions Interaction[]
  invoices     Invoice[]
  Note         Note[]
  projects     Project[]
  quotes       Quote[]

  @@map("clients")
}

model Contact {
  id           String        @id @default(cuid())
  firstName    String
  lastName     String?
  email        String?
  phone        String?
  position     String?
  notes        String?
  isPrimary    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  clientId     String
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  interactions Interaction[]

  @@map("contacts")
}

model Interaction {
  id          String          @id @default(cuid())
  type        InteractionType
  subject     String
  description String?
  date        DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  clientId    String
  contactId   String?
  client      Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  contact     Contact?        @relation(fields: [contactId], references: [id])

  @@map("interactions")
}

model Invoice {
  id          String           @id @default(cuid())
  number      String           @unique
  title       String
  description String?
  status      InvoiceStatus    @default(DRAFT)
  issueDate   DateTime         @default(now())
  dueDate     DateTime
  paidDate    DateTime?
  subtotal    Float            @default(0)
  taxRate     Float            @default(20)
  taxAmount   Float            @default(0)
  total       Float            @default(0)
  currency    String           @default("EUR")
  notes       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      String
  clientId    String
  projectId   String?
  templateId  String?
  emails      Email[]
  items       InvoiceItem[]
  client      Client           @relation(fields: [clientId], references: [id])
  project     Project?         @relation(fields: [projectId], references: [id])
  template    InvoiceTemplate? @relation(fields: [templateId], references: [id])
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model InvoiceTemplate {
  id          String              @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean             @default(false)
  isPublic    Boolean             @default(false)
  category    InvoiceTemplateType @default(BUSINESS)
  layout      Json
  elements    Json
  styles      Json
  variables   Json
  thumbnail   String?
  version     String              @default("1.0.0")
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  userId      String?
  user        User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices    Invoice[]

  @@map("invoice_templates")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  description String
  quantity    Float    @default(1)
  unitPrice   Float
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model Quote {
  id          String      @id @default(cuid())
  number      String      @unique
  title       String
  description String?
  status      QuoteStatus @default(DRAFT)
  validUntil  DateTime
  subtotal    Float       @default(0)
  taxRate     Float       @default(20)
  taxAmount   Float       @default(0)
  total       Float       @default(0)
  currency    String      @default("EUR")
  notes       String?
  acceptedAt  DateTime?
  rejectedAt  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  clientId    String
  projectId   String?
  emails      Email[]
  items       QuoteItem[]
  client      Client      @relation(fields: [clientId], references: [id])
  project     Project?    @relation(fields: [projectId], references: [id])
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quotes")
}

model QuoteItem {
  id          String   @id @default(cuid())
  description String
  quantity    Float    @default(1)
  unitPrice   Float
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  quoteId     String
  quote       Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  @@map("quote_items")
}

model TimeLog {
  id          String    @id @default(cuid())
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int?
  hourlyRate  Float?
  amount      Float?
  isBillable  Boolean   @default(true)
  isRunning   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  projectId   String?
  taskId      String?
  project     Project?  @relation(fields: [projectId], references: [id])
  task        Task?     @relation(fields: [taskId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_logs")
}

model Note {
  id         String   @id @default(cuid())
  title      String
  content    String
  type       NoteType @default(GENERAL)
  isMarkdown Boolean  @default(false)
  isPinned   Boolean  @default(false)
  isArchived Boolean  @default(false)
  color      String   @default("#FFFFFF")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  projectId  String?
  clientId   String?
  taskId     String?
  emails     Email[]
  client     Client?  @relation(fields: [clientId], references: [id])
  project    Project? @relation(fields: [projectId], references: [id])
  task       Task?    @relation(fields: [taskId], references: [id])
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  color       String    @default("#6B7280")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects    Project[]

  @@map("categories")
}

model Tag {
  id          String       @id @default(cuid())
  name        String
  color       String       @default("#8B5CF6")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  projectTags ProjectTag[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskTags    TaskTag[]

  @@map("tags")
}

model ProjectTag {
  projectId String
  tagId     String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([projectId, tagId])
  @@map("project_tags")
}

model TaskTag {
  taskId String
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
  @@map("task_tags")
}

model Email {
  id              String      @id @default(cuid())
  messageId       String      @unique
  subject         String
  htmlContent     String
  textContent     String?
  fromEmail       String
  fromName        String?
  toEmail         String
  toName          String?
  ccEmails        String?
  bccEmails       String?
  replyToEmail    String?
  status          EmailStatus @default(DRAFT)
  openedAt        DateTime?
  openedIpAddress String?
  openedUserAgent String?
  openCount       Int         @default(0)
  respondedAt     DateTime?
  responseCount   Int         @default(0)
  lastResponseAt  DateTime?
  sentAt          DateTime?
  scheduledAt     DateTime?
  bounced         Boolean     @default(false)
  bouncedAt       DateTime?
  bounceReason    String?
  inReplyTo       String?
  references      String?
  threadId        String?
  userId          String
  clientId        String?
  projectId       String?
  invoiceId       String?
  quoteId         String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  taskId          String?
  noteId          String?
  client          Client?     @relation(fields: [clientId], references: [id])
  parentEmail     Email?      @relation("EmailReplies", fields: [inReplyTo], references: [messageId])
  replies         Email[]     @relation("EmailReplies")
  invoice         Invoice?    @relation(fields: [invoiceId], references: [id])
  Note            Note?       @relation(fields: [noteId], references: [id])
  project         Project?    @relation(fields: [projectId], references: [id])
  quote           Quote?      @relation(fields: [quoteId], references: [id])
  Task            Task?       @relation(fields: [taskId], references: [id])
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([userId, sentAt])
  @@index([clientId, sentAt])
  @@index([projectId, sentAt])
  @@index([inReplyTo])
  @@index([threadId])
  @@map("emails")
}

model Automation {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  type                 AutomationType
  isActive             Boolean               @default(true)
  scheduleType         ScheduleType
  scheduleTime         String?
  scheduleDayOfMonth   Int?
  scheduleDayOfWeek    Int?
  scheduleInterval     Int?
  customCronExpression String?
  config               Json
  conditions           Json?
  totalExecutions      Int                   @default(0)
  successfulExecutions Int                   @default(0)
  lastExecutedAt       DateTime?
  nextExecutionAt      DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  userId               String
  executions           AutomationExecution[]
  recipients           AutomationRecipient[]
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("automations")
}

model AutomationRecipient {
  id            String        @id @default(cuid())
  email         String
  name          String?
  recipientType RecipientType @default(CUSTOM)
  automationId  String
  createdAt     DateTime      @default(now())
  automation    Automation    @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@map("automation_recipients")
}

model AutomationExecution {
  id           String          @id @default(cuid())
  status       ExecutionStatus
  startedAt    DateTime        @default(now())
  completedAt  DateTime?
  error        String?
  result       Json?
  automationId String
  automation   Automation      @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@map("automation_executions")
}

enum Role {
  USER
  ADMIN
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  PROSPECT
}

enum InteractionType {
  EMAIL
  PHONE
  MEETING
  NOTE
  PROPOSAL
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum NoteType {
  GENERAL
  PROJECT
  CLIENT
  MEETING
  IDEA
  TASK
}

enum EmailStatus {
  DRAFT
  SCHEDULED
  SENT
  DELIVERED
  OPENED
  REPLIED
  BOUNCED
  FAILED
}

enum InvoiceTemplateType {
  BUSINESS
  CREATIVE
  MINIMAL
  PROFESSIONAL
  MODERN
  CLASSIC
}

enum AutomationType {
  EMAIL_REMINDER
  TASK_CREATION
  STATUS_UPDATE
  REPORT_GENERATION
  CLIENT_FOLLOW_UP
  INVOICE_REMINDER
  BACKUP_DATA
  NOTIFICATION_SEND
  PROJECT_ARCHIVE
  CLIENT_CHECK_IN
  DEADLINE_ALERT
  WEEKLY_SUMMARY
}

enum ScheduleType {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  INTERVAL
  CUSTOM_CRON
}

enum RecipientType {
  CUSTOM
  CLIENT
  TEAM
  PROJECT_MEMBERS
}

enum ExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}
